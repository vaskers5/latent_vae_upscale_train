# general settings
# CUDA_VISIBLE_DEVICES=0,1,2,3 python -m torch.distributed.launch --nproc_per_node=4 --master_port=4321 basicsr/train.py -opt options/train/SwinIR/train_SwinIR_latent_sr_kaggle.yml --launcher pytorch
name: swinirlarge_0.5midjourney_0.5openim_2.8M_1stage_sdxlvae_im256-512_0.5fftlatent_1.0l1latent
model_type: SwinIRLatentModel
scale: 2
num_gpu: 2
manual_seed: 0

vae_sources:
  flux_vae:
    hf_repo: wolfgangblack/flux_vae
    vae_kind: kl
  sdxl_vae:
    hf_repo: stabilityai/sdxl-vae
    vae_kind: kl

# dataset and data loader settings
datasets:
  train:
    name: MidjourneyCropsFluxVAE_train_1_2M
    type: LatentCacheDataset
    high_res: 512
    low_res: 256
    cache_dirs:
      - /data/kazanplova/latent_vae_upscale_train/midjourney_full_dataset_crops_new/embeddings/sdxl_vae
      # - /data/kazanplova/datasets/openim_cropped/train_latents/sdxl_vae
    vae_names: [sdxl_vae]
    phase: train

    filename_tmpl: "{}"
    io_backend:
      type: disk
    scale: 2
    phase: train
    # No normalization for latent data
    mean: null
    std: null
    # data loader
    num_worker_per_gpu: 20
    batch_size_per_gpu: 128
    prefetch_mode: cuda
    pin_memory: true

  val:
    name: sdxk_120_1024x1024
    type: LatentCacheDataset
    high_res: 1024
    low_res: 512
    cache_dirs:
      - /data/kazanplova/datasets/latent_upscale_validation_120_samples/embeddings/sdxl_vae
    vae_names: [sdxl_vae]
    phase: val

    io_backend:
      type: disk
    scale: 2
    mean: null
    std: null
    batch_size_per_gpu: 16
    num_worker_per_gpu: 4
    pin_memory: true

# network structures
network_g:
  type: SwinIR
  upscale: 2
  in_chans: 4
  img_size: 32
  window_size: 8
  img_range: 1.0
  # --- Key parameters for Swin-L ---
  depths: [2, 2, 18, 2]      # Number of blocks in each Swin Transformer layer
  embed_dim: 192             # Embedding dimension (larger than SwinIR-M's 180)
  num_heads: [6, 12, 24, 48] # Number of attention heads in different layers
  # ------------------------------------
  mlp_ratio: 2
  upsampler: 'pixelshuffle'
  resi_connection: '1conv'

# path
# path:
  # pretrain_network_g: ./pretrained_weights/2025_10_17_163115_swinir_stage1_l1_fft_256_512/swinir_stage1_l1_fft_256_512/models/net_g_10000.pth
  # strict_load_g: true
  # resume_state: ~

# training settings
train:
  ema_decay: 0.999
  optim_g:
    type: Adam
    lr: 0.0002
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: MultiStepLR
    milestones: [15000, 22500, 27000]
    gamma: 0.5

  total_steps: 30000
  warmup_iter: -1 # no warm up

  fft_frequency_opt:
    type: FFTFrequencyLoss
    loss_weight: 0.1
    reduction: mean
    space: latent
    norm: ortho
    use_log_amplitude: false
    alpha: 0.0
    normalize_weight: true
    eps: 1e-8
  l1_latent_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean
    space: latent

# validation settings
val:
  val_freq: 2000
  save_img: true
  metrics:
    # --- Latent Space Metrics ---
    l1_latent:
      type: L1Loss
      space: latent # Explicitly state the space
    l2_latent:
      type: MSELoss
      space: latent

    # --- Pixel Space Metrics (requires VAE) ---
    pixel_psnr_pt:
      type: calculate_psnr_pt # Use the PyTorch version for efficiency
      space: pixel
      crop_border: 2
      test_y_channel: false

    pixel_ssim_pt:
      type: calculate_ssim_pt
      space: pixel
      crop_border: 2
      test_y_channel: false

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: 2000 #!!float 5e3
  use_tb_logger: true
  wandb:
    project: SwinIR-Latent-SR
    entity: kazanplova-it-more
    resume_id: null
    # Maximum number of validation images to log to wandb per validation run
    # This prevents cluttering your wandb dashboard with too many images
    max_val_images: 10

# dist training settings
dist_params:
  backend: nccl
  port: 29500
  dist: true

# resume state
resume_state: ~

# load network only
load_networks_only: false
